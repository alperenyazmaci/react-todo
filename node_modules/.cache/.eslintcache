[{"/Users/alperenyazmaci/Desktop/reactproject/src/index.js":"1","/Users/alperenyazmaci/Desktop/reactproject/src/App.js":"2","/Users/alperenyazmaci/Desktop/reactproject/src/reportWebVitals.js":"3","/Users/alperenyazmaci/Desktop/reactproject/src/components/MainDiv.js":"4","/Users/alperenyazmaci/Desktop/reactproject/src/components/MainDivFunctional.js":"5"},{"size":535,"mtime":1671703518495,"results":"6","hashOfConfig":"7"},{"size":270,"mtime":1671886375812,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1671703518495,"results":"9","hashOfConfig":"7"},{"size":1214,"mtime":1671744638994,"results":"10","hashOfConfig":"7"},{"size":2737,"mtime":1671886375103,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ye05o",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/Users/alperenyazmaci/Desktop/reactproject/src/index.js",[],[],"/Users/alperenyazmaci/Desktop/reactproject/src/App.js",[],[],"/Users/alperenyazmaci/Desktop/reactproject/src/reportWebVitals.js",[],[],"/Users/alperenyazmaci/Desktop/reactproject/src/components/MainDiv.js",[],[],"/Users/alperenyazmaci/Desktop/reactproject/src/components/MainDivFunctional.js",["28","29","30","31","32"],[],"import { useState } from \"react\";\n\nfunction MainDivFunctional(){\n    const [counter, setCounter] = useState(0);\n    const [toDoList, setToDoList] = useState([]);\n    const [toDoItemAdd, setToDoItemAdd] = useState(\"\");\n    const [toDoItemRemove, setToDoItemRemove] = useState(\"\");\n    const [warning, setWarning] = useState(\"\");\n\n    const handleAdd = () => {\n        if(toDoItemAdd != \"\"){\n            setCounter(counter + 1);\n            let tempArr = toDoList;\n            tempArr.push(toDoItemAdd);\n            setToDoList(tempArr);\n            setToDoItemAdd(\"\");\n        }else{\n            setWarning(\"Please enter an item.\");\n        }\n    };\n\n    const handleAddEnter = (event) => {\n        if(event.key == \"Enter\"){\n            handleAdd();\n        }\n    };\n\n    const handleRemoveAll = () => {\n        if(counter > 0){\n            setWarning(\"All Items are removed!\");\n        }else{\n            setWarning(\"No Items to remove!\");\n        }\n        setToDoList([]);\n        setCounter(0);\n    };\n\n    const handleRemove = (indexParam) => {\n        setCounter(counter - 1);\n        let tempArr = toDoList;\n        // setToDoItemRemove(toDoList.at(indexParam));\n        // tempArr.remove(toDoItemRemove);\n        tempArr.splice(indexParam, 1);\n        setToDoList(tempArr);\n    }\n\n    const ListItem = (props)=>{\n        return (\n            <div className=\"toDoListDiv\">\n                <h1>{props.name}</h1>\n                <button onClick={() => handleRemove(props.index)}>REMOVE</button>\n            </div>\n        );\n    }\n\n    const toDoListHTML = toDoList.map((item, index) => (\n                // <div key={index} className=\"toDoListDiv\">\n                //     <h1>{item}</h1>\n                //     <button onClick={handleRemove}>REMOVE</button>\n                // </div>\n                    <ListItem key = {index} name = {item} index = {index}></ListItem>\n                ))\n\n    const handleOnChange = (event) => {\n        if(warning != \"\"){\n            setWarning(\"\");\n        }\n        setToDoItemAdd(event.target.value);\n    };\n\n    return(\n        (<div className=\"container\">\n            <div className=\"div1\">\n                <input className=\"input\" type = \"text\" value={toDoItemAdd} onChange={handleOnChange} onKeyDown={handleAddEnter}></input>\n                <button className=\"button1\" onClick={handleAdd}>ADD</button>\n                <button className=\"button2\" onClick={handleRemoveAll}>REMOVE ALL</button>\n            </div>\n            <div className=\"div2\">\n                <h1>Item Count: {counter}</h1>\n                <h1>{warning}</h1>\n            </div>\n            <div className=\"div3\">\n                {toDoListHTML}\n            </div>\n        </div>)\n    );\n}export default MainDivFunctional;",{"ruleId":"33","severity":1,"message":"34","line":7,"column":12,"nodeType":"35","messageId":"36","endLine":7,"endColumn":26},{"ruleId":"33","severity":1,"message":"37","line":7,"column":28,"nodeType":"35","messageId":"36","endLine":7,"endColumn":45},{"ruleId":"38","severity":1,"message":"39","line":11,"column":24,"nodeType":"40","messageId":"41","endLine":11,"endColumn":26},{"ruleId":"38","severity":1,"message":"42","line":23,"column":22,"nodeType":"40","messageId":"41","endLine":23,"endColumn":24},{"ruleId":"38","severity":1,"message":"39","line":65,"column":20,"nodeType":"40","messageId":"41","endLine":65,"endColumn":22},"no-unused-vars","'toDoItemRemove' is assigned a value but never used.","Identifier","unusedVar","'setToDoItemRemove' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='."]